// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPeerProperties(t *testing.T) {
	t.Parallel()

	query := PeerProperties()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPeerPropertiesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PeerProperty{}
	if err = randomize.Struct(seed, o, peerPropertyDBTypes, true, peerPropertyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PeerProperty struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PeerProperties().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPeerPropertiesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PeerProperty{}
	if err = randomize.Struct(seed, o, peerPropertyDBTypes, true, peerPropertyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PeerProperty struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := PeerProperties().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PeerProperties().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPeerPropertiesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PeerProperty{}
	if err = randomize.Struct(seed, o, peerPropertyDBTypes, true, peerPropertyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PeerProperty struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PeerPropertySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PeerProperties().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPeerPropertiesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PeerProperty{}
	if err = randomize.Struct(seed, o, peerPropertyDBTypes, true, peerPropertyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PeerProperty struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PeerPropertyExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if PeerProperty exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PeerPropertyExists to return true, but got false.")
	}
}

func testPeerPropertiesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PeerProperty{}
	if err = randomize.Struct(seed, o, peerPropertyDBTypes, true, peerPropertyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PeerProperty struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	peerPropertyFound, err := FindPeerProperty(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if peerPropertyFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPeerPropertiesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PeerProperty{}
	if err = randomize.Struct(seed, o, peerPropertyDBTypes, true, peerPropertyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PeerProperty struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = PeerProperties().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPeerPropertiesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PeerProperty{}
	if err = randomize.Struct(seed, o, peerPropertyDBTypes, true, peerPropertyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PeerProperty struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := PeerProperties().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPeerPropertiesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	peerPropertyOne := &PeerProperty{}
	peerPropertyTwo := &PeerProperty{}
	if err = randomize.Struct(seed, peerPropertyOne, peerPropertyDBTypes, false, peerPropertyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PeerProperty struct: %s", err)
	}
	if err = randomize.Struct(seed, peerPropertyTwo, peerPropertyDBTypes, false, peerPropertyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PeerProperty struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = peerPropertyOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = peerPropertyTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PeerProperties().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPeerPropertiesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	peerPropertyOne := &PeerProperty{}
	peerPropertyTwo := &PeerProperty{}
	if err = randomize.Struct(seed, peerPropertyOne, peerPropertyDBTypes, false, peerPropertyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PeerProperty struct: %s", err)
	}
	if err = randomize.Struct(seed, peerPropertyTwo, peerPropertyDBTypes, false, peerPropertyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PeerProperty struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = peerPropertyOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = peerPropertyTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PeerProperties().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func peerPropertyBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *PeerProperty) error {
	*o = PeerProperty{}
	return nil
}

func peerPropertyAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *PeerProperty) error {
	*o = PeerProperty{}
	return nil
}

func peerPropertyAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *PeerProperty) error {
	*o = PeerProperty{}
	return nil
}

func peerPropertyBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PeerProperty) error {
	*o = PeerProperty{}
	return nil
}

func peerPropertyAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PeerProperty) error {
	*o = PeerProperty{}
	return nil
}

func peerPropertyBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PeerProperty) error {
	*o = PeerProperty{}
	return nil
}

func peerPropertyAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PeerProperty) error {
	*o = PeerProperty{}
	return nil
}

func peerPropertyBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PeerProperty) error {
	*o = PeerProperty{}
	return nil
}

func peerPropertyAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PeerProperty) error {
	*o = PeerProperty{}
	return nil
}

func testPeerPropertiesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &PeerProperty{}
	o := &PeerProperty{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, peerPropertyDBTypes, false); err != nil {
		t.Errorf("Unable to randomize PeerProperty object: %s", err)
	}

	AddPeerPropertyHook(boil.BeforeInsertHook, peerPropertyBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	peerPropertyBeforeInsertHooks = []PeerPropertyHook{}

	AddPeerPropertyHook(boil.AfterInsertHook, peerPropertyAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	peerPropertyAfterInsertHooks = []PeerPropertyHook{}

	AddPeerPropertyHook(boil.AfterSelectHook, peerPropertyAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	peerPropertyAfterSelectHooks = []PeerPropertyHook{}

	AddPeerPropertyHook(boil.BeforeUpdateHook, peerPropertyBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	peerPropertyBeforeUpdateHooks = []PeerPropertyHook{}

	AddPeerPropertyHook(boil.AfterUpdateHook, peerPropertyAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	peerPropertyAfterUpdateHooks = []PeerPropertyHook{}

	AddPeerPropertyHook(boil.BeforeDeleteHook, peerPropertyBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	peerPropertyBeforeDeleteHooks = []PeerPropertyHook{}

	AddPeerPropertyHook(boil.AfterDeleteHook, peerPropertyAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	peerPropertyAfterDeleteHooks = []PeerPropertyHook{}

	AddPeerPropertyHook(boil.BeforeUpsertHook, peerPropertyBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	peerPropertyBeforeUpsertHooks = []PeerPropertyHook{}

	AddPeerPropertyHook(boil.AfterUpsertHook, peerPropertyAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	peerPropertyAfterUpsertHooks = []PeerPropertyHook{}
}

func testPeerPropertiesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PeerProperty{}
	if err = randomize.Struct(seed, o, peerPropertyDBTypes, true, peerPropertyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PeerProperty struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PeerProperties().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPeerPropertiesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PeerProperty{}
	if err = randomize.Struct(seed, o, peerPropertyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PeerProperty struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(peerPropertyColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := PeerProperties().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPeerPropertyToOneCrawlUsingCrawl(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local PeerProperty
	var foreign Crawl

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, peerPropertyDBTypes, false, peerPropertyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PeerProperty struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, crawlDBTypes, false, crawlColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Crawl struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.CrawlID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Crawl().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := PeerPropertySlice{&local}
	if err = local.L.LoadCrawl(ctx, tx, false, (*[]*PeerProperty)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Crawl == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Crawl = nil
	if err = local.L.LoadCrawl(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Crawl == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPeerPropertyToOneSetOpCrawlUsingCrawl(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PeerProperty
	var b, c Crawl

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, peerPropertyDBTypes, false, strmangle.SetComplement(peerPropertyPrimaryKeyColumns, peerPropertyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, crawlDBTypes, false, strmangle.SetComplement(crawlPrimaryKeyColumns, crawlColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, crawlDBTypes, false, strmangle.SetComplement(crawlPrimaryKeyColumns, crawlColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Crawl{&b, &c} {
		err = a.SetCrawl(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Crawl != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PeerProperties[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.CrawlID != x.ID {
			t.Error("foreign key was wrong value", a.CrawlID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CrawlID))
		reflect.Indirect(reflect.ValueOf(&a.CrawlID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.CrawlID != x.ID {
			t.Error("foreign key was wrong value", a.CrawlID, x.ID)
		}
	}
}

func testPeerPropertiesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PeerProperty{}
	if err = randomize.Struct(seed, o, peerPropertyDBTypes, true, peerPropertyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PeerProperty struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPeerPropertiesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PeerProperty{}
	if err = randomize.Struct(seed, o, peerPropertyDBTypes, true, peerPropertyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PeerProperty struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PeerPropertySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPeerPropertiesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PeerProperty{}
	if err = randomize.Struct(seed, o, peerPropertyDBTypes, true, peerPropertyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PeerProperty struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PeerProperties().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	peerPropertyDBTypes = map[string]string{`ID`: `integer`, `Property`: `character varying`, `Value`: `character varying`, `Count`: `integer`, `CrawlID`: `integer`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`}
	_                   = bytes.MinRead
)

func testPeerPropertiesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(peerPropertyPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(peerPropertyAllColumns) == len(peerPropertyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PeerProperty{}
	if err = randomize.Struct(seed, o, peerPropertyDBTypes, true, peerPropertyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PeerProperty struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PeerProperties().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, peerPropertyDBTypes, true, peerPropertyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PeerProperty struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPeerPropertiesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(peerPropertyAllColumns) == len(peerPropertyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PeerProperty{}
	if err = randomize.Struct(seed, o, peerPropertyDBTypes, true, peerPropertyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PeerProperty struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PeerProperties().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, peerPropertyDBTypes, true, peerPropertyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PeerProperty struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(peerPropertyAllColumns, peerPropertyPrimaryKeyColumns) {
		fields = peerPropertyAllColumns
	} else {
		fields = strmangle.SetComplement(
			peerPropertyAllColumns,
			peerPropertyPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PeerPropertySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPeerPropertiesUpsert(t *testing.T) {
	t.Parallel()

	if len(peerPropertyAllColumns) == len(peerPropertyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := PeerProperty{}
	if err = randomize.Struct(seed, &o, peerPropertyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PeerProperty struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PeerProperty: %s", err)
	}

	count, err := PeerProperties().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, peerPropertyDBTypes, false, peerPropertyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PeerProperty struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PeerProperty: %s", err)
	}

	count, err = PeerProperties().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
